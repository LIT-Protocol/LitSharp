@page "/networkdefaults"
@using Radzen.Blazor.Rendering;
@using SharedService;
@using LitContracts.Staking.ContractDefinition;
@using SimpleNodeOps;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>NopeOps - Contract Defaults</PageTitle>
<h2>Configuration</h2>  
<SimpleNodeOps.Components.MinimalHeader />  
<br/>


<SimpleNodeOps.Components.Config.Defaults config_return_value="@config_return_value" />

@code {

    public LitContracts.Staking.ContractDefinition.Config? config_return_value { get; set;}


    protected override async Task OnInitializedAsync()
    {                

        var resolver = new Resolver(localStorage);
        ConfigOutputDTO? config_call = null;
        try {
            var stakingService = await resolver.GetStakingService();
            config_call = await stakingService.ConfigQueryAsync();            
        }
        catch (Exception e) {
            Console.WriteLine(e.Message);
        }

        if (config_call == null)
            return;
        config_return_value  = config_call.ReturnValue1;
    }
}