@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Services.Metrics.Poller poller
<PageTitle>LNE - Lit Node Explorer</PageTitle>

<h2>Developer Node Explorer</h2>    

<br/>
<div class="card border-primary">
  <div class="card-header  ">
    <div class="row no-gutters">
      <div class="col">
            Lit Network Selection  
        </div>
    </div>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col">

        <div >
       
            @for (int i =0 ;i < networks.Length; i++)
            {
                var copy = i; 
                <input type="radio" class="btn-check" name="options-base" id="option-@i" autocomplete="off" selected="@networks[copy].selected"
                    @onclick="() => {  env = networks[copy].env; networkName = networks[copy].name; chainUrl = networks[copy].url; 
                                      resolverAddress = networks[copy].resolverAddress;  rpc_api_url = networks[copy].rpc_api_url;
                                      rpc_api_type = networks[copy].rpc_api_type; explorerUrl = networks[copy].explorerUrl;  SetAllValues(copy);  }">
                <label class="btn btn-outline-primary" for="option-@i">@networks[i].name</label>
            }   

                <input type="radio" class="btn-check" name="options-base" id="option-1000" autocomplete="off">
                <label class="btn disabled btn-outline-secondary" for="option-1000">Jalapeno*</label>
                <input type="radio" class="btn-check" name="options-base" id="option-1001" autocomplete="off">
                <label class="btn disabled btn-outline-secondary" for="option-1001">Serrano*</label>

        </div>
        <br/>

        <div class="form-group">
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Network Name</span>
                <input type="text" class="form-control" name="networkName" value="@networkName" placeholder="Network" aria-label="Username" disabled aria-describedby="basic-addon1">
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Environment (Dev = 0, Staging = 1, Production = 2)</span>
                <input type="text" id="env" class="form-control" name="env" value="@env" @onchange="envChanged" />
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Chain URL</span>
                <input type="text" id="chainUrl" class="form-control" name="chainId" value="@chainUrl" @onchange="ChainUrlChanged" />
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Resolver Contract Address</span>
                <input type="text" id="resolverAddress" class="form-control" name="resolverAddress" value="@resolverAddress" @onchange="ResolverAddressChanged" />
            </div>
            
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Private Key</span>
                <input type="text" id="privateKey" class="form-control" name="privateKey" value="@defaultPrivateKey" @onchange="PrivateKeyChanged" />
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">RPC API Type (1 = BlockScout, 2 = OtterScan)</span>
                <input type="text" id="rpcApiType" class="form-control" name="rpcApiType" value="@rpc_api_type" @onchange="RpcApiTypeChanged" />
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">RPC API Url</span>
                <input type="text" id="rpcApiUrl" class="form-control" name="rpcApiUrl" value="@rpc_api_url" @onchange="RpcApiUrlChanged" />
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Explorer Url</span>
                <input type="text" id="explorerUrl" class="form-control" name="explorerUrl" value="@explorerUrl" @onchange="ExplorerUrlChanged" />
            </div>
        </div>
        <div>
            <label class="text-secondary">* These networks have ABIs that are too old to currently be supported by this tool.</label>
        </div>

      </div>
    </div>
  </div>
</div>

<br />

<div class="card border-primary">
  <div class="card-header  ">
    <div class="row no-gutters">
      <div class="col">
         Polling Service
        </div>
    </div>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col">
        The polling service runs in the background of this wasm app and attempts to gather information from the nodes in close to real time - currently polling every 500 ms.  To view realtime interactive node information, the nodes must support metrics collection - this requires that the node code has the "rtmetric" compilation flag enabled; releasing in test mode automatically enables this flag.        This is a work in progress and may be updated as the project progresses.
      </div>
      <div class="col-1 text-center">
        <div class="form-group">
            <button type="button" class="btn btn-primary" @onclick="() => poller.StartAsync()">Start</button>                        
        </div>
      </div>
      <div class="col-1">
        <div class="form-group">
            <button type="button" class="btn btn-primary" @onclick="() => poller.StopAsync()">Stop</button>
        </div>
      
      </div>
    </div>
  </div>
</div>

<br/>
<div class="card border-primary">
  <div class="card-header">
    <div class="row no-gutters"> 
      <div class="col">
    Notes
        </div>
    </div>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col">

<li>
    This tool is runs entirely in the browser and requires only a the resolver contract address (or staker contract address) and access to the base chain in order to self configure.    
</li>
    <li>A private key is required for transactions that require funds - in the default scenario, this is the first key from the Anvil/HardHat node list.   Feel free to use something random - a value is required to initialize the underlying Nethereum C# library, even if it isn't used.</li>
<li>
    Without real-time interaction (collected by the poller service), the other exploration functions will continue to work - though this becomes more of a chain explorer with some handy functionality.
</li>
<li>
    This tool was written in C# using Blazor technology and the Nethereum library - a web3 or ethers equivalent for C#.
</li>
<li>
    Source code is available at <a href="https://github.com/GTC6244/LitSharp/">LitSharp</a>
</li>

<p></p>
<p>
    <label class="text-danger">*** This tool currently uses a single set of ABIs for all networks - hopefully the latest version!  Browsing networks that use earlier versions of the contracts will lead to unpredictable results.</label>
</p>

      </div>
    </div>
  </div>
</div>

@code {
    struct LitNetwork {
        public string name;
        public byte env; // 0 = dev, 1 = staging, 2 = prod
        public string url;
        public int chainId;
        public string resolverAddress;
        public bool selected;

        public string rpc_api_url;
        public int rpc_api_type;
        public string? explorerUrl;
    }
    string? networkName;
    string? chainUrl;
    string? resolverAddress;
    string? defaultPrivateKey;
    byte env = 0;
    string? rpc_api_url;
    int rpc_api_type = 1;
    string? explorerUrl;

    LitNetwork[] networks = new LitNetwork[] {
        new LitNetwork() { name = "Localhost", env=0, url = "http://127.0.0.1:8545", chainId=0 , resolverAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3" , selected=false , rpc_api_url ="http://127.0.0.1:8545", rpc_api_type = 2 },
        new LitNetwork() { name = "DevInternal", env=0, url = "https://lit-protocol.calderachain.xyz/http", chainId=175177, resolverAddress = "0xFFb9afC9e8B731CB5d4194ec728657875510a8C8", selected=false, rpc_api_url = "https://lit-protocol.calderaexplorer.xyz/api", rpc_api_type = 1, explorerUrl = "https://lit-protocol.calderaexplorer.xyz/address/" },
        new LitNetwork() { name = "Cayenne", env=0, url = "https://lit-protocol.calderachain.xyz/http", chainId=175177 , resolverAddress = "0xb82f2dB0B486F1ef698CC88F0d521D873eb04d03" , selected=false, rpc_api_url = "https://lit-protocol.calderaexplorer.xyz/api", rpc_api_type = 1, explorerUrl = "https://lit-protocol.calderaexplorer.xyz/address/" },
        new LitNetwork() { name = "Manzano", env=0, url = "https://lit-protocol.calderachain.xyz/http", chainId=175177 , resolverAddress = "0x9F0Ede26261451C5E784DC799D71ECf766EB7562" , selected=false, rpc_api_url = "https://lit-protocol.calderaexplorer.xyz/api", rpc_api_type = 1, explorerUrl = "https://lit-protocol.calderaexplorer.xyz/address/" },
        new LitNetwork() { name = "Habanero", env=2, url ="https://lit-protocol.calderachain.xyz/http", chainId=175177 , resolverAddress = "0xe5a7C5d908EE8996332F488cE5f636d4EBff8522" , selected=false, rpc_api_url = "https://lit-protocol.calderaexplorer.xyz/api", rpc_api_type = 1, explorerUrl = "https://lit-protocol.calderaexplorer.xyz/address/" },
        new LitNetwork() { name = "DatilDev", env=0, url = "https://yellowstone-rpc.litprotocol.com/", chainId=175188, resolverAddress = "0xCF5d7074c722Dd044Dd45EC791942b881366627c", selected=false, rpc_api_url = "https://yellowstone-explorer.litprotocol.com/api", rpc_api_type = 1, explorerUrl = "https://yellowstone-explorer.litprotocol.com/address/" },
        new LitNetwork() { name = "DatilTest", env=0, url = "https://yellowstone-rpc.litprotocol.com/", chainId=175188, resolverAddress = "0xCf908e1E4Ee79fb540e144C3EDB2796E8D413548", selected=false, rpc_api_url = "https://yellowstone-explorer.litprotocol.com/api", rpc_api_type = 1, explorerUrl = "https://yellowstone-explorer.litprotocol.com/address/" },
        new LitNetwork() { name = "DatilProd", env=2, url = "https://yellowstone-rpc.litprotocol.com/", chainId=175188, resolverAddress = "0x5326a59fF2c41bCdA7E64F9afB9C313d0342117B", selected=false, rpc_api_url = "https://yellowstone-explorer.litprotocol.com/api", rpc_api_type = 1, explorerUrl = "https://yellowstone-explorer.litprotocol.com/address/" },
    };
    protected override async Task OnInitializedAsync()
    {
        if ( await localStorage.ContainKeyAsync("env") ) 
          env = await localStorage.GetItemAsync<byte>("env");                
        
        networkName = await localStorage.GetItemAsync<string>("networkName");
        if ( string.IsNullOrEmpty( networkName ) ) networkName = "Localhost";
        chainUrl = await localStorage.GetItemAsync<string>("url");
        if ( string.IsNullOrEmpty( chainUrl ) ) chainUrl = "http://127.0.0.1:8545";
        resolverAddress = await localStorage.GetItemAsync<string>("contractResolverAddress");
        if ( string.IsNullOrEmpty( resolverAddress ) ) resolverAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
        defaultPrivateKey = await localStorage.GetItemAsync<string>("privateKey");
        if ( string.IsNullOrEmpty( defaultPrivateKey ) ) defaultPrivateKey = "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80";

        rpc_api_url = await localStorage.GetItemAsync<string>("rpc_api_url");
        if ( string.IsNullOrEmpty( rpc_api_url ) ) rpc_api_url = "http://127.0.0.1:8545";

        if ( await localStorage.ContainKeyAsync("rpc_api_type") ) 
          rpc_api_type = await localStorage.GetItemAsync<int>("rpc_api_type");      

        explorerUrl = await localStorage.GetItemAsync<string>("explorerUrl");
        if ( string.IsNullOrEmpty( explorerUrl ) ) explorerUrl = "https://lit-protocol.calderaexplorer.xyz/address/";

        for (int i =0 ;i < networks.Length; i++)
        {
            if ( networkName == networks[i].name ) 
                networks[i].selected = true;
            else           
                networks[i].selected = false;
        }
    }

    async void SetAllValues(int index) {
        await localStorage.SetItemAsync("networkName", networkName);
        await localStorage.SetItemAsync("url", chainUrl);
        await localStorage.SetItemAsync("env", env);
        await localStorage.SetItemAsync("contractResolverAddress", resolverAddress);
        await localStorage.SetItemAsync("privateKey", defaultPrivateKey);
        await localStorage.SetItemAsync("rpc_api_type", rpc_api_type);
        await localStorage.SetItemAsync("rpc_api_url", rpc_api_url);
        await localStorage.SetItemAsync("explorerUrl", explorerUrl);
    }
    async void ResolverAddressChanged(ChangeEventArgs e)
    {

        
        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        resolverAddress =  e.Value.ToString();
        await localStorage.SetItemAsync("contractResolverAddress", resolverAddress);
    }

    async void ChainUrlChanged(ChangeEventArgs e)
    {
        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        chainUrl = e.Value.ToString();
        await localStorage.SetItemAsync("url", chainUrl);
    }

    async void PrivateKeyChanged(ChangeEventArgs e)
    {

        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        defaultPrivateKey = e.Value.ToString();
        await localStorage.SetItemAsync("privateKey", defaultPrivateKey);
    }

    async void envChanged(ChangeEventArgs e)
    {

        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        try {
            env = byte.Parse( e.Value.ToString() );
            await localStorage.SetItemAsync("env", env);
        } catch (Exception ex) {
            Console.WriteLine(ex.Message);
        } 
    }

    async void RpcApiTypeChanged(ChangeEventArgs e)
    {

        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        try {
            rpc_api_type = int.Parse( e.Value.ToString() );
            await localStorage.SetItemAsync("rpc_api_type", env);
        } catch (Exception ex) {
            Console.WriteLine(ex.Message);
        } 
    }
    async void RpcApiUrlChanged(ChangeEventArgs e)
    {

        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        try {
            rpc_api_url = e.Value.ToString();
            await localStorage.SetItemAsync("rpc_api_url", rpc_api_url);
        } catch (Exception ex) {
            Console.WriteLine(ex.Message);
        } 
    }

    async void ExplorerUrlChanged(ChangeEventArgs e)
    {

        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        try {
            explorerUrl = e.Value.ToString();
            await localStorage.SetItemAsync("explorerUrl", explorerUrl);
        } catch (Exception ex) {
            Console.WriteLine(ex.Message);
        } 
    }

}