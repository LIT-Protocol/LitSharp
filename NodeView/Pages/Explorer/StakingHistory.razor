@page "/explorer/stakinghistory"
@using Radzen.Blazor.Rendering;
@using SharedService;
@using System.Numerics;
@using LitContracts.Staking;
@using Nethereum.Contracts.Extensions;
@using Services.Metrics.Models;
@using Services.ChainData.Models;
@using Services.ChainData;
@using Nethereum.Util;
@using Nethereum.Web3;
@using Nethereum.ABI.Model; 
@using Nethereum.Contracts;
@using Nethereum.Web3.Accounts;
@using Nethereum.RPC.Eth.DTOs;
@using Nethereum.Hex.HexTypes;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

<PageTitle>LNE - Staking History</PageTitle>
<h2>Chain Based Network History</h2>    

<br />
<div class="row">
<div class="col-9">
      <div class="card border-primary">
        <div class="card-header  ">
          <div class="row no-gutters">
            <div class="col">
              Chain History for Network
              </div>
            <div class="col text-align-right">
              <form class="form-inline">
                <div class="input-group mb-1 mr-sm-1">
                  <div class="input-group-prepend">
                    <div class="input-group-text">From</div>
                  </div>
                  <input  type="number"  class="form-control" name="fromBlock" placeholder="0"  value="@fromBlock" @onchange="fromBlockChanged"  />
                  <div class="input-group-prepend">
                    <div class="input-group-text">To</div>
                  </div>
                  <input  type="number"  class="form-control" name="toBlock" value="@toBlock"  placeholder="9999999" disabled />
                  <button type="button" class="btn btn-primary btn-sm" @onclick="FilterHistory">Search</button>
                </div>
                </form>
              </div>
          </div>
        </div>
        <div class="card-body p-0">
          <div class="row">
            <div class="col"> 

                 @* PageSize="30" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" *@
@* Style="height:800px" *@
              <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true"   AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                 AllowSorting="false" 
                  AllowVirtualization="true"  
                  PageSize="30" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" 
                  Data="@entries" TItem="SimpleTx" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" 
                  SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedEntries RowClick=@OnRowClick>
                  <Columns>       
                      <RadzenDataGridColumn TItem="SimpleTx" Title="Block / Time" Width="15%" >
                          <Template Context="data">
                              @data.blockNumber <br/>
                              @data.chainTimeStamp
                          </Template>
                      
                      </RadzenDataGridColumn>
                      <RadzenDataGridColumn TItem="SimpleTx" Property="input" Title="Description" Width="60%" >
                          <Template Context="data">
                              @{
                                  var (name, description) = get_description(data.input, data.isError);
                                  if (data.isError == "1") {
                                    <div class="text-danger">@name</div>
                                  }
                                  else {
                                    <div class="text-success">@name</div>
                                  }
                              }
                              @(new MarkupString(description.Replace("\n", "<br/>"))) 
                          </Template>
                      </RadzenDataGridColumn>  
                      <RadzenDataGridColumn TItem="SimpleTx" Property="from"  Title="From" Width="25%" />                
                  </Columns>
              </RadzenDataGrid>  
            </div>
          </div>
        </div>
      </div>  

  </div>


  <div class="col">

    <div class="card border-primary">
      <div class="card-header  ">
        <div class="row no-gutters">
          <div class="col">
            <b>Network State (Historic)</b><br /><br />
            </div>
        </div>
        <div class="row no-gutters">
          <div class="col">
            
            <div class="row">
              <div class="col-12">
                  State:    
                  @network_state  
              </div>
              <div class="col-6">
                  Epoch:
                  @epoch_number  
              </div>
              <div class="col-6">
                  Block:
                  @block_number  
              </div>
            </div>

          </div>
        </div>
      </div>
      <div class="card-body p-0">
        <div class="row">
          <div class="col">
            <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="30" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@current_validators" TItem="Services.Metrics.Models.Validator" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>       
                    <RadzenDataGridColumn TItem="Services.Metrics.Models.Validator" Title="Current Nodes" Width="100%" >
                        <Template Context="data">
                          <div class="row">
                            <div class="col">
                            @{
                                  if (data.kicked ) {
                                    <div class="text-danger">Node #@data.NodeName - Kicked: @data.NodeSocketAddress </div>
                                  }
                                  else {
                                    <div class="text-success">Node #@data.NodeName - Active: @data.NodeSocketAddress </div>
                                  }
                            }
                            </div>
                            @{ if (data.kicked_votes > 0) {
                                <div class="col-2">
                                  <div class="badge bg-danger">@data.kicked_votes</div>
                                </div>
                              }
                            }
                          </div>

                            <a href="@("https://lit-protocol.calderaexplorer.xyz/address/"  +data.StakerAddress)" style="text-decoration:none" target="_blank" >@data.StakerAddress</a>                        
                        </Template>
                    </RadzenDataGridColumn>    
                </Columns>
            </RadzenDataGrid>
          </div>
        </div>  
        <div class="row">
          <div class="col">
            <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="30" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@next_validators" TItem="Services.Metrics.Models.Validator" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>       
                    <RadzenDataGridColumn TItem="Services.Metrics.Models.Validator" Title="Next Nodes" Width="100%" >
                        <Template Context="data">
                            Node #@data.NodeName : @data.NodeSocketAddress <br/>
                            <a href="@("https://lit-protocol.calderaexplorer.xyz/address/"  +data.NodeAddress)" style="text-decoration:none" target="_blank" >@data.NodeAddress</a>                        
                        </Template>
                    </RadzenDataGridColumn>    
                </Columns>
            </RadzenDataGrid>
          </div>
        </div> 

      </div>
    </div>  

    <p></p>
        <div class="row">
          <div class="col">            
            <NodeView.Components.Config.Defaults config_return_value="@config_return_value" />
          </div>
        </div> 

    <p></p>

        <div class="row">
          <div class="col">            
            <NodeView.Components.EpochDetails epoch_return_value="@epoch_return_value" />
          </div>
        </div>

  </div>


  
</div>


@code {
    private string fromBlock { get; set; } = "0";
    private string toBlock { get; set; } = "9999999";
    private string network_state { get; set; } = "";
    private string epoch_number { get; set; } = "";
    private string block_number { get; set; } = "";
    private List<Validator> ? current_validators = null;
    private List<Validator> ? next_validators = null;
    private string kicked_validators = "Kicked validators:";
    private List<SimpleTx>? entries { get; set; }
    private IList<SimpleTx>? selectedEntries;
    private StakingService? stakingService = null;
    private Nethereum.Contracts.ContractBuilder? contractBuilder = null;
    public LitContracts.Staking.ContractDefinition.Config? config_return_value { get; set;}
    public LitContracts.Staking.ContractDefinition.Epoch? epoch_return_value { get; set; }


    private (string, string) get_description(String input , string? isError) {
        
        var function_input = input.Substring(0,10);
        if (this.contractBuilder != null) {

          System.Text.StringBuilder sb = new System.Text.StringBuilder();
          try {

              if (function_input == "0x60806040") {
                return ("Contract Deployment", "");
              }

              Nethereum.ABI.Model.FunctionABI function = contractBuilder.GetFunctionAbiBySignature(function_input);
              List<Nethereum.ABI.FunctionEncoding.ParameterOutput> data =  function.DecodeInputDataToDefault(input);        
              foreach (var item in data)
              {
                  @* Console.WriteLine(item.Parameter.Name + " " + item.Result); *@
                  sb.Append(item.Parameter.Name + ":" + item.Result + System.Environment.NewLine);
              } 
              return (function.Name, sb.ToString());
            
          }
          catch (Exception ex) {
            Console.WriteLine(ex.Message);
            return ("","");
          }
        }
        return ("","");
    }

    protected override async Task OnInitializedAsync()
    {
        
        var resolver = new Resolver(localStorage);
        stakingService = await resolver.GetStakingService();
        contractBuilder = LitContracts.RawABI.get_staking_contract_abi(stakingService.ContractHandler.ContractAddress);       
        await LoadHistory();
    }

    protected async Task OnRowClick(DataGridRowMouseEventArgs<SimpleTx> args)
    {
        await UpdateNetworkSnapshot( args.Data.blockNumber);
    }

    protected async Task UpdateNetworkSnapshot(string args_block) {

        BlockParameter historic_block;
        if ( args_block.Contains("0x")  ) 
          historic_block =  new BlockParameter( new HexBigInteger(args_block) );
        else 
          historic_block =  new BlockParameter( ulong.Parse( args_block));

        block_number = historic_block.BlockNumber.ToString();
        var state = await stakingService.StateQueryAsync(historic_block);
            
        switch (state) {
            case 0:
                network_state = "Active";
                break;
            case 1:
                network_state = "Next Validator Set Locked";
                break;
            case 2:
                network_state = "Ready For Next Epoch";
                break;
            case 3:
                network_state = "Unlocked";
                break;
            case 4:
                network_state = "Paused";
                break;
            case 5:
                network_state = "Restore";
                break;
            default:
                network_state = "Unknown";
                break;
        }


        var epochOutput = await stakingService.EpochQueryAsync(historic_block);
        epoch_number = epochOutput.ReturnValue1.Number.ToString();
        @* epoch_length = epochOutput.ReturnValue1.EpochLength;
        epoch_end_time = epochOutput.ReturnValue1.EndTime; *@

        @* Getting config *@
        try {
            var config_call = await stakingService.ConfigQueryAsync(historic_block);            
            if (config_call == null)
                return;
            config_return_value  = config_call.ReturnValue1;
        }
        catch (Exception e) {
            Console.WriteLine(e.Message);
        }

        @* Getting epoch details *@
        try {
          var get_epoch_call = await stakingService.EpochQueryAsync(historic_block);
          if (get_epoch_call == null)
              return;
          epoch_return_value = get_epoch_call.ReturnValue1;
        }
        catch (Exception e) {
            Console.WriteLine(e.Message);
        }

        try  {
          var v = await stakingService.GetValidatorsStructsInCurrentEpochQueryAsync(historic_block);
          current_validators = await getValidatorList( v.ReturnValue1, stakingService , historic_block);
          var v2 = await stakingService.GetValidatorsStructsInNextEpochQueryAsync(historic_block);
          next_validators = await getValidatorList( v2.ReturnValue1, stakingService, historic_block);    
        } 
        catch (Exception ex) {
          Console.WriteLine(ex.Message);
        }
         
        @* var k = await stakingService.GetKickedValidatorsQueryAsync(historic_block);
        var kicked_validators = "Kicked validators: " + string.Join(", ", k.ToArray()); *@
    }

  public async Task<List<Validator>> getValidatorList(List<LitContracts.Staking.ContractDefinition.Validator> v, StakingService stakingService, Nethereum.RPC.Eth.DTOs.BlockParameter historic_block ) {
        var validators = v.Select(x => new Validator()
        {
            Ip = x.Ip,
            Port = x.Port,
            NodeAddress = x.NodeAddress,
            Reward = x.Reward,
            SenderPubKey = x.SenderPubKey,
            ReceiverPubKey = x.ReceiverPubKey
        }).ToList();

        var node_addresses = validators.Select(x => x.NodeAddress).ToList();
        var stakers = await stakingService.GetNodeStakerAddressMappingsQueryAsync(node_addresses, historic_block );
        
        foreach (Validator validator in validators) {
            validator.StakerAddress = stakers.ReturnValue1.FirstOrDefault(x => x.NodeAddress == validator.NodeAddress)?.StakerAddress ?? "n/a";
        }

        var kicked_validators = await stakingService.GetKickedValidatorsQueryAsync(historic_block );
        var epoch = BigInteger.Parse(epoch_number);
        foreach (Validator validator in validators) {
            if ( validator.StakerAddress != null ) {
                validator.kicked = kicked_validators.Contains(validator.StakerAddress);            
                var kicked_votes = await stakingService.GetVotingStatusToKickValidatorQueryAsync(epoch, validator.StakerAddress, validator.StakerAddress, historic_block );
                validator.kicked_votes = int.Parse( kicked_votes.ReturnValue1.ToString());
            }
        }


        
         


        validators.Sort((x, y) => x.StakerAddress.CompareTo(y.StakerAddress));
        int i = 1;
        foreach (Validator validator in validators) {
            validator.NodeName = i.ToString();
            i++;
        }

        return validators;
    }

    async void fromBlockChanged(ChangeEventArgs e)
    {
        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        try {
            fromBlock = e.Value.ToString();            
        } catch (Exception ex) {
            Console.WriteLine(ex.Message);
        } 
    }

    private async Task FilterHistory()
    {

        await LoadHistory(int.Parse(fromBlock), int.Parse(toBlock));
    }

    private async Task LoadHistory(int fromBlock = 0, int toBlock = 9999999)
    {      
        
   
        var address = stakingService.ContractHandler.ContractAddress;
        
        RpcCalls rpcCalls = new RpcCalls();

        var rpc_api_url = await localStorage.GetItemAsync<string>("rpc_api_url");
        var rpc_api_type = await localStorage.GetItemAsync<int>("rpc_api_type");
        entries = await rpcCalls.GetTxListAsync(rpc_api_type, rpc_api_url, address, fromBlock, toBlock);

        Console.WriteLine("Loaded " + entries.Count + " entries");

        if (entries.Count > 0)  {
          var block_number = entries[0].blockNumber.ToString();      
          Console.WriteLine("Loading snapshot for block " + block_number);
          await UpdateNetworkSnapshot(block_number);
        }
        
    }
} 
